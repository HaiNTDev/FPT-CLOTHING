/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Order;

import DBUtils.DBUtils;
import OrderDetail.OrderDetailDAO;
import OrderDetail.OrderDetailDTO;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Acer
 */
public class OrderDAO {

    // Create CRUD
    public boolean insert(OrderDTO order) throws SQLException {
        String sql = "insert into tableOrder(orderID, accountID, orderDate, status, total)\n"
                + " values (?, ?, ?, ?, ?)";
        try {

            Connection conn = DBUtils.getConnection();
            PreparedStatement ps = conn.prepareStatement(sql);
           
            ps.setInt(1, order.getOrderID());
            ps.setInt(2, order.getAccountID());
            ps.setDate(3, new java.sql.Date(order.getOrderDate().getTime()));
            ps.setString(4, order.getStatus());
            ps.setInt(5, order.getTotalPrice());
            
            ps.executeUpdate();

        } catch (SQLException ex) {
            System.out.println("Insert order error!" + ex.getMessage());
        }
        return false;
    }

    public List<OrderDTO> listOrder() throws SQLException {
        List<OrderDTO> list = new ArrayList<>();
        Connection cn = DBUtils.getConnection();
        if (cn != null) {
            String sql = "select orderID, accountID, orderDate, status, total\n"
                    + "from tableOrder\n";

            PreparedStatement pst = cn.prepareStatement(sql);

            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                int oid = rs.getInt("orderID");
                int accid = rs.getInt("accountID");
                Date odate = rs.getDate("orderDate");
                String status = rs.getString("status");
                int quantity = rs.getInt("total");

                OrderDTO order = new OrderDTO(oid, accid, odate, quantity);
                order.setStatus(status);
                list.add(order);

            }
            cn.close();
        }
        return list;
    }

    public boolean finishorder(int id) throws SQLException {
        String sql = "update tableOderID\n"
                + " set status = REPLACE(status, 'ongoing', 'finish')"
                + "where orderID = ?";
        try {
            Connection conn = DBUtils.getConnection();
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, id);
            ResultSet rs = ps.executeQuery();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public boolean delete(int orderID) throws SQLException {
        String sql = "delete from tableOrder\n"
                + " where orderID = ?";
        try {
            Connection conn = DBUtils.getConnection();
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, orderID);
            ResultSet rs = ps.executeQuery();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return false;
    }

    public OrderDTO load(int id) throws SQLException {
        OrderDTO result = null;

        Connection cn = DBUtils.getConnection();
        if (cn != null) {
            String sql = "select orderDate, status, total\n"
                    + "from tableOrder\n"
                    + "where orderID = ?";

            PreparedStatement pst = cn.prepareStatement(sql);
            pst.setInt(1, id);

            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                Date date = rs.getDate("orderDate");
                String status = rs.getString("status");
                int total = rs.getInt("total");

                result = new OrderDTO(date, total, status);
            }
            cn.close();
        }
        return result;
    }
    
    public int autogeneratedID(){
        List<OrderDTO> list = new ArrayList();
        int orderId = 1;
        
        try{
            list = listOrder();
        }catch(SQLException e){
            e.printStackTrace();
        }
        
        if(!list.isEmpty() || list != null){
            for(OrderDTO order : list){
                orderId = 0;
                
                if(order.getOrderID() < orderId + 1){
                    continue;
                }
                
                orderId = orderId + order.getOrderID() + 1;

            }
        }
        
        return orderId;
    }
    
    
}
